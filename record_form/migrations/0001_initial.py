# Generated by Django 2.2.7 on 2019-12-10 12:34

import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='PersonInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(help_text='Provide full and other names here', max_length=100)),
                ('date_of_birth', models.DateField(help_text='Please select date of birth of person')),
                ('today_date', models.DateField(auto_now_add=True)),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], max_length=6)),
                ('id_type', models.CharField(choices=[('Voters Id', 'Voters Id'), ('Birth Certificate', 'Birth Certificate'), ('National Health Insurance', 'National Health Insurance')], help_text='National Identification Type', max_length=26)),
                ('id_number', models.CharField(help_text='Enter ID Type number here', max_length=20)),
                ('mobile_number', models.CharField(max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the form '+233206754455'", regex='^\\+?1?\\d{9,15}$')])),
                ('disability_type', models.CharField(choices=[('Blindness', 'Blindness'), ('Low Vision', 'Low Vision'), ('Leprosoy Cured persons', 'Leprosoy Cured persons'), ('Locomotor Disability', 'Locomotor Disability'), ('Dwarfism', 'Dwarfism'), ('Intellectual Disability', 'Intellectual Disability'), ('Mental Illness', 'Mental Illness'), ('Cerebral Palsy', 'Cerebral Palsy'), ('Specific Learning Disabilities', 'Specific Learning Disabilities'), ('Speech and Language disability', 'Speech and Language disability'), ('Hearing Impairment', 'Hearing Impairment'), ('Muscular Dystrophy', 'Muscular Dystrophy'), ('Acid Attack Victim', 'Acid Attack Victim'), ('Parkinson’s disease', 'Parkinson’s disease'), ('Multiple Sclerosis', 'Multiple Sclerosis'), ('Thalassemia', 'Thalassemia'), ('Hemophilia', 'Hemophilia'), ('Sickle Cell disease', 'Sickle Cell disease'), ('Autism Spectrum Disorder', 'Autism Spectrum Disorder'), ('Chronic Neurological conditions', 'Chronic Neurological conditions'), ('Multiple Disabilities including Deaf Blindness', 'Multiple Disabilities including Deaf Blindness')], help_text='Select Nature of disability', max_length=255)),
                ('community_name', models.CharField(help_text='Area where he/she lives', max_length=50)),
                ('street_name', models.CharField(help_text='Name of the particular street of residence', max_length=50)),
                ('land_mark', models.CharField(help_text='Could be a popular building, or anything that makes identifying the place easy', max_length=100)),
                ('house_number', models.CharField(help_text='House number / GPS Code', max_length=100)),
                ('caregiver_name', models.CharField(help_text='Provide full name of care giver', max_length=100)),
                ('caregiver_number', models.CharField(max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the form '+233206754455'", regex='^\\+?1?\\d{9,15}$')])),
                ('passport_pic', models.ImageField(upload_to='passport/%y%m%d/')),
            ],
            options={
                'verbose_name': 'Personal Information',
                'verbose_name_plural': 'Personal Informations',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=25, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(max_length=40)),
                ('last_name', models.CharField(max_length=140)),
                ('zonal_council', models.CharField(choices=[('Gbentaana', 'Gbentaana'), ('Koose', 'Koose'), ('Nii Ashaley', 'Nii Ashaley')], max_length=255)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
